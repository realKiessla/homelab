jenkins:
  controller:

    # Image.
    image: "tenbriz/jenkins"
    tag: "latest"
    imagePullPolicy: "IfNotPresent"

    # Admin user.
    adminSecret: false

    containerEnv:
      - name: SECRETS
        value: /secrets/jenkins

    installPlugins:
      - git
      - ldap
      - job-dsl
      - kubernetes
      - role-strategy
      - cloudbees-folder
      - workflow-aggregator
      - pipeline-stage-view
      - github-branch-source
      - configuration-as-code

    JCasC:
      defaultConfig: true
      configScripts:
        welcome-message: |
          jenkins:
            systemMessage: Welcome to our CI\CD server. This Jenkins is configured and managed 'as code'.
        ldap-settings: |
          jenkins:
            securityRealm:
              ldap:
                configurations:
                - server: "ldap://openldap.openldap.svc.cluster.local:389"
                  rootDN: "dc=kiessla,dc=de"
                  managerDN: "cn=admin,dc=kiessla,dc=de"
                  managerPasswordSecret: ${LDAP_PASSWORD}
                  userSearchBase: "ou=users"
                  groupSearchBase: "ou=groups"
                  groupSearchFilter: "cn={0}"
                  inhibitInferRootDN: false
                disableMailAddressResolver: false
                disableRolePrefixing: true
                groupIdStrategy: "caseInsensitive"
                userIdStrategy: "caseInsensitive"
        role-strategy-auth: |
          jenkins:
            authorizationStrategy:
              roleBased:
                roles:
                  global:
                    - name: "admin"
                      description: "Jenkins administrators"
                      permissions:
                        - "Overall/Administer"
                      assignments:
                        - "jenkins-admin"
                    - name: "user"
                      description: "Jenkins users"
                      permissions:
                        - "Overall/Read"
                        - "Job/Read"
                      assignments:
                        - "jenkins-user"
        credentials: |
          credentials:
            system:
              domainCredentials:
                - credentials:
                    - usernamePassword:
                        scope: GLOBAL
                        id: "github"
                        username: "realkiessla"
                        password: "${GITHUB_PASSWORD}"
                        description: "Username/Password Credentials for github.com"
                    - usernamePassword:
                        scope: GLOBAL
                        id: "docker"
                        username: "tenbriz"
                        password: "${DOCKER_PASSWORD}"
                        description: "Username/Password Credentials for hub.docker.com"
        jobs: |
          jobs:
            - script: >
                folder('jenkins')

    # Ingress.
    ingress:
      enabled: true
      paths:
        - path: "/"
          pathType: Prefix
          backend:
            service:
              name: "jenkins"
              port:
                number: 8080
      apiVersion: "networking.k8s.io/v1"
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
      hostName: "jenkins.caas.i.kiessla.de"
      tls:
        - secretName: "jenkins.acme-tls"
          hosts:
            - "jenkins.caas.i.kiessla.de"

    # Can be used to disable rendering master test resources when using helm template
    testEnabled: false

  agent:
    image: "tenbriz/jenkins-inbound-agent"
    tag: "4.6-1-jdk11"
    podName: "jenkins-agent"

  additionalAgents:
    docker-arm:
      podName: docker-arm
      nodeSelector:
        tools/docker: "1"
      volumes:
        - type: HostPath
          hostPath: /var/run/docker.sock
          mountPath: /var/run/docker.sock
      yamlTemplate: |-
        apiVersion: v1
        kind: Pod
        spec:
          containers:
            - name: docker
              image: docker:20.10
              command:
              tty: true
              volumeMounts:
              - mountPath: /var/run/docker.sock
                name: volume-0

  persistence:
    volumes:
      - name: jenkins-secrets
        secret:
          secretName: jenkins-secrets
    mounts:
      - name: jenkins-secrets
        mountPath: /secrets/jenkins
        readOnly: true
